{"version":3,"file":"static/js/910.582d8697.chunk.js","mappings":"+SAAaA,EAAgB,SAAAC,GAAK,OAChCC,QAAQC,OAAO,IAAIC,MAAJ,UAAaH,EAAb,kMADiB,E,SCGlCI,EAAAA,EAAAA,SAAAA,QAAyB,+BAEzBA,EAAAA,EAAAA,SAAAA,OAAwB,CACtBC,QAASC,EAAAA,EACTC,SAAU,SCHL,IAAMC,EAAa,mCAAG,6GAENJ,EAAAA,EAAAA,IAAU,qBAFJ,cAEnBK,EAFmB,yBAIlBA,EAAKC,KAAKC,SAJQ,yDAMlBZ,EAAc,yJANI,yDAAH,qDAUba,EAAqB,mCAAG,WAAMC,GAAN,gGAEdT,EAAAA,EAAAA,IAAA,iBAAoBS,IAFN,cAE3BJ,EAF2B,yBAI1BA,EAAKC,MAJqB,yDAM1BX,EAAc,8LANY,yDAAH,sDAUrBe,EAAc,mCAAG,WAAMC,GAAN,gGAEPX,EAAAA,EAAAA,IAAU,gBAAiB,CAC5CY,OAAQ,CAAED,MAAAA,KAHc,cAEpBN,EAFoB,yBAMnBA,EAAKC,KAAKC,SANS,yDAQnBZ,EAAc,yJARK,yDAAH,sDAYdkB,EAAY,mCAAG,WAAMJ,GAAN,gGAELT,EAAAA,EAAAA,IAAA,iBAAoBS,EAApB,aAFK,cAElBJ,EAFkB,yBAIjBA,EAAKC,KAAKQ,MAJO,yDAMjBnB,EAAc,gNANG,yDAAH,sDAUZoB,EAAe,mCAAG,WAAMN,GAAN,gGAERT,EAAAA,EAAAA,IAAA,iBAAoBS,EAApB,aAFQ,cAErBJ,EAFqB,yBAIpBA,EAAKC,KAAKC,SAJU,yDAMpBZ,EAAc,yJANM,yDAAH,qD,yGCM5B,UA7Ca,WACX,IAAQc,GAAYO,EAAAA,EAAAA,MAAZP,QACR,GAA4BQ,EAAAA,EAAAA,UAAS,MAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOrB,EAAP,KAAcwB,EAAd,KAWA,OATAC,EAAAA,EAAAA,YAAU,WACRD,EAAS,MACTD,EAAU,OAEVN,EAAAA,EAAAA,IAAaJ,GACVa,MAAK,SAAAhB,GAAI,OAAIa,EAAUb,EAAd,IACTiB,OAAM,SAAA3B,GAAK,OAAIwB,EAASxB,EAAb,GACf,GAAE,CAACa,KAGF,iCACE,wBACGS,GACCA,EAAOM,KAAI,gBAAGC,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,KAAMC,EAAvB,EAAuBA,UAAWC,EAAlC,EAAkCA,QAAlC,OACT,0BACGH,GACC,gBACEI,IAAG,UAAKC,EAAAA,GAAL,OAAiBL,GACpBM,MAAM,MACNC,OAAO,MACPC,IAAG,UAAKP,MAGV,SAAC,IAAD,CAASK,MAAM,QAAQC,OAAO,WAEhC,wBAAKN,KACL,uCAAeC,OAZRC,EADA,MAkBdV,GAA4B,IAAlBA,EAAOgB,SAChB,oEAGDtC,IAAS,SAAC,IAAD,UAAQA,EAAMuC,YAG7B,C,qEChDYC,E,OAAeC,EAAAA,GAAH,8D,SCAZtC,EAAQ,SAAC,GAAD,IAAGuC,EAAH,EAAGA,SAAH,OAAkB,SAACF,EAAD,UAAeE,GAAjC,C,qECARC,E,OAAYF,EAAAA,IAAH,oLACX,SAAAG,GAAK,OAAIA,EAAMT,KAAV,IACJ,SAAAS,GAAK,OAAIA,EAAMR,MAAV,I,SCDJS,EAAU,SAAC,GAAD,IAAGV,EAAH,EAAGA,MAAOC,EAAV,EAAUA,OAAV,OACrB,0BACE,SAACO,EAAD,CAAWR,MAAOA,EAAOC,OAAQA,EAAjC,0BAFmB,C,6ECHvB,IAAMF,EAAY,kCACZ5B,EAAU,kC","sources":["helpers/errorReject.js","api/default.js","api/api.js","components/Cast.js","components/Error/Error.styled.js","components/Error/Error.js","components/ImgPlug/ImgPlug.styled.js","components/ImgPlug/ImgPlug.js","consts.js"],"sourcesContent":["export const errorFunction = error =>\n  Promise.reject(new Error(`${error} Попробуйте перезагрузить страницу`));\n","import axios from 'axios';\nimport { API_KEY } from 'consts';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\naxios.defaults.params = {\n  api_key: API_KEY,\n  language: 'en-US',\n};\n","import axios from 'axios';\nimport { errorFunction } from 'helpers/errorReject';\nimport './default';\n\nexport const fetchForTrend = async () => {\n  try {\n    const resp = await axios.get('/trending/all/day');\n\n    return resp.data.results;\n  } catch (error) {\n    return errorFunction('Не удалось загрузить тренды.');\n  }\n};\n\nexport const fetchForMovieDetailes = async movieId => {\n  try {\n    const resp = await axios.get(`/movie/${movieId}`);\n\n    return resp.data;\n  } catch (error) {\n    return errorFunction('Не удалось загрузить детали фильма.');\n  }\n};\n\nexport const fetchForSearch = async query => {\n  try {\n    const resp = await axios.get('/search/movie', {\n      params: { query },\n    });\n\n    return resp.data.results;\n  } catch (error) {\n    return errorFunction('Не удалось загрузить фильмы.');\n  }\n};\n\nexport const fetchForCast = async movieId => {\n  try {\n    const resp = await axios.get(`/movie/${movieId}/credits`);\n\n    return resp.data.cast;\n  } catch (error) {\n    return errorFunction('Не удалось загрузить актерский состав.');\n  }\n};\n\nexport const fetchForReviews = async movieId => {\n  try {\n    const resp = await axios.get(`/movie/${movieId}/reviews`);\n\n    return resp.data.results;\n  } catch (error) {\n    return errorFunction('Не удалось загрузить отзывы.');\n  }\n};\n","import { fetchForCast } from 'api/api';\nimport { imgOrigin } from 'consts';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Error } from './Error/Error';\nimport { ImgPlug } from './ImgPlug';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [actors, setActors] = useState(null);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    setError(null);\n    setActors(null);\n\n    fetchForCast(movieId)\n      .then(data => setActors(data))\n      .catch(error => setError(error));\n  }, [movieId]);\n\n  return (\n    <>\n      <ul>\n        {actors &&\n          actors.map(({ profile_path, name, character, cast_id }) => (\n            <li key={cast_id}>\n              {profile_path ? (\n                <img\n                  src={`${imgOrigin}${profile_path}`}\n                  width=\"100\"\n                  height=\"150\"\n                  alt={`${name}`}\n                />\n              ) : (\n                <ImgPlug width=\"100px\" height=\"150px\" />\n              )}\n              <h3>{name}</h3>\n              <p>Character: {character}</p>\n            </li>\n          ))}\n      </ul>\n\n      {actors && actors.length === 0 && (\n        <p>We don't have any actors for this movie.</p>\n      )}\n\n      {error && <Error>{error.message}</Error>}\n    </>\n  );\n};\n\nexport default Cast;\n","import styled from '@emotion/styled';\n\nexport const ErrorMessage = styled.h2`\n  color: red;\n  text-align: center;\n`;\n","import { ErrorMessage } from './Error.styled';\n\nexport const Error = ({ children }) => <ErrorMessage>{children}</ErrorMessage>;\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  width: ${props => props.width};\n  height: ${props => props.height};\n  background-color: lightgrey;\n  text-align: center;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n","import { Container } from './ImgPlug.styled';\nimport PropTypes from 'prop-types';\n\nexport const ImgPlug = ({ width, height }) => (\n  <div>\n    <Container width={width} height={height}>\n      No picture(\n    </Container>\n  </div>\n);\n\nImgPlug.propTypes = {\n  width: PropTypes.string.isRequired,\n  height: PropTypes.string.isRequired,\n};\n","const imgOrigin = 'https://image.tmdb.org/t/p/w500';\nconst API_KEY = '13311e11047b48cfd8c9963a1d63772d';\n\nexport { imgOrigin, API_KEY };\n"],"names":["errorFunction","error","Promise","reject","Error","axios","api_key","API_KEY","language","fetchForTrend","resp","data","results","fetchForMovieDetailes","movieId","fetchForSearch","query","params","fetchForCast","cast","fetchForReviews","useParams","useState","actors","setActors","setError","useEffect","then","catch","map","profile_path","name","character","cast_id","src","imgOrigin","width","height","alt","length","message","ErrorMessage","styled","children","Container","props","ImgPlug"],"sourceRoot":""}