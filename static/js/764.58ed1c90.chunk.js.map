{"version":3,"file":"static/js/764.58ed1c90.chunk.js","mappings":"wTAAaA,EAAgB,kBAC3BC,QAAQC,OACN,IAAIC,MAAM,8SAFe,ECAhBC,EAAS,CACpBC,QAAS,mCACTC,SAAU,SCAZC,EAAAA,EAAAA,SAAAA,QAAyB,+BCGlB,IAAMC,EAAa,mCAAG,6GAEND,EAAAA,EAAAA,IAAU,oBAAqB,CAChDH,OAAAA,IAHuB,cAEnBK,EAFmB,yBAMlBA,EAAKC,KAAKC,SANQ,yDAQlBX,KARkB,yDAAH,qDAYbY,EAAqB,mCAAG,WAAMC,GAAN,gGAEdN,EAAAA,EAAAA,IAAA,iBAAoBM,GAAW,CAChDT,OAAAA,IAH+B,cAE3BK,EAF2B,yBAM1BA,EAAKC,MANqB,yDAQ1BV,KAR0B,yDAAH,sDAYrBc,EAAc,mCAAG,WAAMC,GAAN,gGAEPR,EAAAA,EAAAA,IAAU,gBAAiB,CAC5CH,QAAO,kBAAMA,GAAP,IAAeW,MAAAA,MAHG,cAEpBN,EAFoB,yBAMnBA,EAAKC,KAAKC,SANS,yDAQnBX,KARmB,yDAAH,sDAYdgB,EAAY,mCAAG,WAAMH,GAAN,gGAELN,EAAAA,EAAAA,IAAA,iBAAoBM,EAApB,YAAuC,CACxDT,OAAAA,IAHsB,cAElBK,EAFkB,yBAMjBA,EAAKC,KAAKO,MANO,yDAQjBjB,KARiB,yDAAH,sDAYZkB,EAAe,mCAAG,WAAML,GAAN,gGAERN,EAAAA,EAAAA,IAAA,iBAAoBM,EAApB,YAAuC,CACxDT,OAAAA,IAHyB,cAErBK,EAFqB,yBAMpBA,EAAKC,KAAKC,SANU,yDAQpBX,KARoB,yDAAH,qD,qECnDfmB,E,OAAeC,EAAAA,GAAH,8D,SCAZjB,EAAQ,SAAC,GAAD,IAAGkB,EAAH,EAAGA,SAAH,OAAkB,SAACF,EAAD,UAAeE,GAAjC,C,+FCoErB,UAhEe,WACb,OAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAA4BC,EAAAA,EAAAA,UAAS,MAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACMC,GAAWC,EAAAA,EAAAA,MAEXC,EAAST,EAAaU,IAAI,UAEhCC,EAAAA,EAAAA,YAAU,WACHF,IAILlB,EAAAA,EAAAA,IAAekB,GACZG,MAAK,SAAAzB,GACJiB,EAAUjB,EACX,IACA0B,OAAM,SAAAR,GAAK,OAAIC,EAASD,EAAb,GACf,GAAE,CAACI,IAgBJ,OACE,iCACE,kBAAMK,SAhBW,SAAAC,GACnBA,EAAEC,iBAEF,IAAMxB,EAAQuB,EAAEE,cAAcC,MAAMC,MAAMC,OAI1CnB,EAF6B,KAAVT,EAAe,CAAEA,MAAAA,GAAU,CAAC,GAI1CA,GACHY,EAAU,KAEb,EAIG,WACE,kBAAOiB,KAAK,OAAOC,KAAK,WACxB,mBAAQD,KAAK,SAAb,wBAGF,wBACGlB,GACmB,IAAlBA,EAAOoB,QACPpB,EAAOqB,KAAI,SAAAN,GAAK,OACd,yBACE,SAAC,KAAD,CAAMO,GAAE,UAAKP,EAAMQ,IAAMC,MAAOpB,EAAhC,SACGW,EAAMU,MAAQV,EAAMU,MAAQV,EAAMI,QAF9BJ,EAAMQ,GADD,MASnBvB,GAA4B,IAAlBA,EAAO0B,SAChB,kEAGA1B,IAAU,8DAEXE,IAAS,SAAC,IAAD,UAAQA,EAAMyB,YAG7B,C","sources":["helpers/errorReject.js","api/params.js","api/default.js","api/api.js","components/Error/Error.styled.js","components/Error/Error.js","pages/Movies.js"],"sourcesContent":["export const errorFunction = () =>\n  Promise.reject(\n    new Error('Ой! Что то пошло не так. Попробуйте перезапустить страницу')\n  );\n","export const params = {\n  api_key: '13311e11047b48cfd8c9963a1d63772d',\n  language: 'en-US',\n};\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n","import axios from 'axios';\nimport { errorFunction } from 'helpers/errorReject';\nimport { params } from './params';\nimport './default';\n\nexport const fetchForTrend = async () => {\n  try {\n    const resp = await axios.get('/trending/all/day', {\n      params,\n    });\n\n    return resp.data.results;\n  } catch (error) {\n    return errorFunction();\n  }\n};\n\nexport const fetchForMovieDetailes = async movieId => {\n  try {\n    const resp = await axios.get(`/movie/${movieId}`, {\n      params,\n    });\n\n    return resp.data;\n  } catch (error) {\n    return errorFunction();\n  }\n};\n\nexport const fetchForSearch = async query => {\n  try {\n    const resp = await axios.get('/search/movie', {\n      params: { ...params, query },\n    });\n\n    return resp.data.results;\n  } catch (error) {\n    return errorFunction();\n  }\n};\n\nexport const fetchForCast = async movieId => {\n  try {\n    const resp = await axios.get(`/movie/${movieId}/credits`, {\n      params,\n    });\n\n    return resp.data.cast;\n  } catch (error) {\n    return errorFunction();\n  }\n};\n\nexport const fetchForReviews = async movieId => {\n  try {\n    const resp = await axios.get(`/movie/${movieId}/reviews`, {\n      params,\n    });\n\n    return resp.data.results;\n  } catch (error) {\n    return errorFunction();\n  }\n};\n","import styled from '@emotion/styled';\n\nexport const ErrorMessage = styled.h2`\n  color: red;\n  text-align: center;\n`;\n","import { ErrorMessage } from './Error.styled';\n\nexport const Error = ({ children }) => <ErrorMessage>{children}</ErrorMessage>;\n","import { fetchForSearch } from 'api/api';\nimport { Error } from 'components/Error/Error';\nimport { useEffect, useState } from 'react';\nimport { Link, useSearchParams } from 'react-router-dom';\nimport { useLocation } from 'react-router-dom';\n\nconst Movies = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [movies, setMovies] = useState(null);\n  const [error, setError] = useState(null);\n  const location = useLocation();\n\n  const search = searchParams.get('query');\n\n  useEffect(() => {\n    if (!search) {\n      return;\n    }\n\n    fetchForSearch(search)\n      .then(data => {\n        setMovies(data);\n      })\n      .catch(error => setError(error));\n  }, [search]);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const query = e.currentTarget.movie.value.trim();\n\n    const nextParams = query !== '' ? { query } : {};\n\n    setSearchParams(nextParams);\n\n    if (!query) {\n      setMovies(null);\n    }\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <input type=\"text\" name=\"movie\" />\n        <button type=\"submit\">Search</button>\n      </form>\n\n      <ul>\n        {movies &&\n          movies.lenght !== 0 &&\n          movies.map(movie => (\n            <li key={movie.id}>\n              <Link to={`${movie.id}`} state={location}>\n                {movie.title ? movie.title : movie.name}\n              </Link>\n            </li>\n          ))}\n      </ul>\n\n      {movies && movies.length === 0 && (\n        <p>No movies were found for your request</p>\n      )}\n\n      {!movies && <p>Enter name of your searching movie</p>}\n\n      {error && <Error>{error.message}</Error>}\n    </>\n  );\n};\n\nexport default Movies;\n"],"names":["errorFunction","Promise","reject","Error","params","api_key","language","axios","fetchForTrend","resp","data","results","fetchForMovieDetailes","movieId","fetchForSearch","query","fetchForCast","cast","fetchForReviews","ErrorMessage","styled","children","useSearchParams","searchParams","setSearchParams","useState","movies","setMovies","error","setError","location","useLocation","search","get","useEffect","then","catch","onSubmit","e","preventDefault","currentTarget","movie","value","trim","type","name","lenght","map","to","id","state","title","length","message"],"sourceRoot":""}