{"version":3,"file":"static/js/764.a2d43bd5.chunk.js","mappings":"+SAAaA,EAAgB,SAAAC,GAAK,OAChCC,QAAQC,OAAO,IAAIC,MAAJ,UAAaH,EAAb,kMADiB,E,SCGlCI,EAAAA,EAAAA,SAAAA,QAAyB,+BAEzBA,EAAAA,EAAAA,SAAAA,OAAwB,CACtBC,QAASC,EAAAA,EACTC,SAAU,SCHL,IAAMC,EAAa,mCAAG,6GAENJ,EAAAA,EAAAA,IAAU,qBAFJ,cAEnBK,EAFmB,yBAIlBA,EAAKC,KAAKC,SAJQ,yDAMlBZ,EAAc,yJANI,yDAAH,qDAUba,EAAqB,mCAAG,WAAMC,GAAN,gGAEdT,EAAAA,EAAAA,IAAA,iBAAoBS,IAFN,cAE3BJ,EAF2B,yBAI1BA,EAAKC,MAJqB,yDAM1BX,EAAc,8LANY,yDAAH,sDAUrBe,EAAc,mCAAG,WAAMC,GAAN,gGAEPX,EAAAA,EAAAA,IAAU,gBAAiB,CAC5CY,OAAQ,CAAED,MAAAA,KAHc,cAEpBN,EAFoB,yBAMnBA,EAAKC,KAAKC,SANS,yDAQnBZ,EAAc,yJARK,yDAAH,sDAYdkB,EAAY,mCAAG,WAAMJ,GAAN,gGAELT,EAAAA,EAAAA,IAAA,iBAAoBS,EAApB,aAFK,cAElBJ,EAFkB,yBAIjBA,EAAKC,KAAKQ,MAJO,yDAMjBnB,EAAc,gNANG,yDAAH,sDAUZoB,EAAe,mCAAG,WAAMN,GAAN,gGAERT,EAAAA,EAAAA,IAAA,iBAAoBS,EAApB,aAFQ,cAErBJ,EAFqB,yBAIpBA,EAAKC,KAAKC,SAJU,yDAMpBZ,EAAc,yJANM,yDAAH,qD,qEC5CfqB,E,OAAeC,EAAAA,GAAH,8D,SCAZlB,EAAQ,SAAC,GAAD,IAAGmB,EAAH,EAAGA,SAAH,OAAkB,SAACF,EAAD,UAAeE,GAAjC,C,6ECFrB,IAAMC,EAAY,kCACZjB,EAAU,kC,+FCwEhB,UAnEe,WACb,OAAwCkB,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAA4BC,EAAAA,EAAAA,UAAS,MAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAO3B,EAAP,KAAc8B,EAAd,KACMC,GAAWC,EAAAA,EAAAA,MAEXC,EAASR,EAAaS,IAAI,UAEhCC,EAAAA,EAAAA,YAAU,WACHF,IAILH,EAAS,MACTD,EAAU,OAEVf,EAAAA,EAAAA,IAAemB,GACZG,MAAK,SAAA1B,GACJmB,EAAUnB,EACX,IACA2B,OAAM,SAAArC,GAAK,OAAI8B,EAAS9B,EAAb,IACf,GAAE,CAACiC,IAgBJ,OACE,iCACE,kBAAMK,SAhBW,SAAAC,GACnBA,EAAEC,iBAEF,IAAMzB,EAAQwB,EAAEE,cAAcC,MAAMC,MAAMC,OAI1ClB,EAF6B,KAAVX,EAAe,CAAEA,MAAAA,GAAU,CAAC,GAI1CA,GACHc,EAAU,KAEb,EAIG,WACE,kBAAOgB,KAAK,OAAOC,KAAK,WACxB,mBAAQD,KAAK,SAAb,wBAGF,wBACGjB,GACmB,IAAlBA,EAAOmB,QACPnB,EAAOoB,KAAI,SAAAN,GAAK,OACd,yBACE,SAAC,KAAD,CAAMO,GAAE,UAAKP,EAAMQ,IAAMC,MAAOpB,EAAhC,SACGW,EAAMU,MAAQV,EAAMU,MAAQV,EAAMI,QAF9BJ,EAAMQ,GADD,MASnBtB,GAA4B,IAAlBA,EAAOyB,SAChB,kEAGAzB,IAAW5B,IAAS,8DAErBA,IAAS,SAAC,IAAD,UAAQA,EAAMsD,YAG7B,C","sources":["helpers/errorReject.js","api/default.js","api/api.js","components/Error/Error.styled.js","components/Error/Error.js","consts.js","pages/Movies.js"],"sourcesContent":["export const errorFunction = error =>\n  Promise.reject(new Error(`${error} Попробуйте перезагрузить страницу`));\n","import axios from 'axios';\nimport { API_KEY } from 'consts';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\naxios.defaults.params = {\n  api_key: API_KEY,\n  language: 'en-US',\n};\n","import axios from 'axios';\nimport { errorFunction } from 'helpers/errorReject';\nimport './default';\n\nexport const fetchForTrend = async () => {\n  try {\n    const resp = await axios.get('/trending/all/day');\n\n    return resp.data.results;\n  } catch (error) {\n    return errorFunction('Не удалось загрузить тренды.');\n  }\n};\n\nexport const fetchForMovieDetailes = async movieId => {\n  try {\n    const resp = await axios.get(`/movie/${movieId}`);\n\n    return resp.data;\n  } catch (error) {\n    return errorFunction('Не удалось загрузить детали фильма.');\n  }\n};\n\nexport const fetchForSearch = async query => {\n  try {\n    const resp = await axios.get('/search/movie', {\n      params: { query },\n    });\n\n    return resp.data.results;\n  } catch (error) {\n    return errorFunction('Не удалось загрузить фильмы.');\n  }\n};\n\nexport const fetchForCast = async movieId => {\n  try {\n    const resp = await axios.get(`/movie/${movieId}/credits`);\n\n    return resp.data.cast;\n  } catch (error) {\n    return errorFunction('Не удалось загрузить актерский состав.');\n  }\n};\n\nexport const fetchForReviews = async movieId => {\n  try {\n    const resp = await axios.get(`/movie/${movieId}/reviews`);\n\n    return resp.data.results;\n  } catch (error) {\n    return errorFunction('Не удалось загрузить отзывы.');\n  }\n};\n","import styled from '@emotion/styled';\n\nexport const ErrorMessage = styled.h2`\n  color: red;\n  text-align: center;\n`;\n","import { ErrorMessage } from './Error.styled';\n\nexport const Error = ({ children }) => <ErrorMessage>{children}</ErrorMessage>;\n","const imgOrigin = 'https://image.tmdb.org/t/p/w500';\nconst API_KEY = '13311e11047b48cfd8c9963a1d63772d';\n\nexport { imgOrigin, API_KEY };\n","import { fetchForSearch } from 'api/api';\nimport { Error } from 'components/Error/Error';\nimport { useEffect, useState } from 'react';\nimport { Link, useSearchParams } from 'react-router-dom';\nimport { useLocation } from 'react-router-dom';\n\nconst Movies = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [movies, setMovies] = useState(null);\n  const [error, setError] = useState(null);\n  const location = useLocation();\n\n  const search = searchParams.get('query');\n\n  useEffect(() => {\n    if (!search) {\n      return;\n    }\n\n    setError(null);\n    setMovies(null);\n\n    fetchForSearch(search)\n      .then(data => {\n        setMovies(data);\n      })\n      .catch(error => setError(error));\n  }, [search]);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const query = e.currentTarget.movie.value.trim();\n\n    const nextParams = query !== '' ? { query } : {};\n\n    setSearchParams(nextParams);\n\n    if (!query) {\n      setMovies(null);\n    }\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <input type=\"text\" name=\"movie\" />\n        <button type=\"submit\">Search</button>\n      </form>\n\n      <ul>\n        {movies &&\n          movies.lenght !== 0 &&\n          movies.map(movie => (\n            <li key={movie.id}>\n              <Link to={`${movie.id}`} state={location}>\n                {movie.title ? movie.title : movie.name}\n              </Link>\n            </li>\n          ))}\n      </ul>\n\n      {movies && movies.length === 0 && (\n        <p>No movies were found for your request</p>\n      )}\n\n      {!movies && !error && <p>Enter name of your searching movie</p>}\n\n      {error && <Error>{error.message}</Error>}\n    </>\n  );\n};\n\nexport default Movies;\n"],"names":["errorFunction","error","Promise","reject","Error","axios","api_key","API_KEY","language","fetchForTrend","resp","data","results","fetchForMovieDetailes","movieId","fetchForSearch","query","params","fetchForCast","cast","fetchForReviews","ErrorMessage","styled","children","imgOrigin","useSearchParams","searchParams","setSearchParams","useState","movies","setMovies","setError","location","useLocation","search","get","useEffect","then","catch","onSubmit","e","preventDefault","currentTarget","movie","value","trim","type","name","lenght","map","to","id","state","title","length","message"],"sourceRoot":""}